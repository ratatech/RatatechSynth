<?xml version="1.0" encoding="UTF-8"?>
<model version="4.3.0" links="0">
 <documentation>Simple model template for QP/C++</documentation>
 <framework name="qpcpp"/>
 <package name="Events" stereotype="0x01" namespace="ADSRHSM::">
  <class name="noteOnEvt" superclass="qpcpp::QEvt"/>
  <class name="noteOffEvt" superclass="qpcpp::QEvt"/>
 </package>
 <package name="AOs" stereotype="0x02" namespace="ADSRHSM::">
  <class name="Adsr" superclass="qpcpp::QActive">
   <documentation>Adsr active object</documentation>
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <operation name="Adsr" type="" visibility="0x00" properties="0x00">
    <documentation>constructor</documentation>
    <code>  : QActive(Q_STATE_CAST(&amp;Adsr::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U)

// body</code>
   </operation>
   <statechart>
    <initial target="../1">
     <action>me-&gt;m_timeEvt.armX(BSP::TICKS_PER_SEC/2, BSP::TICKS_PER_SEC/2);</action>
     <initial_glyph conn="6,2,4,1,3,38,3,-4">
      <action box="1,-2,67,5"/>
     </initial_glyph>
    </initial>
    <state name="idle">
     <entry>iprintf(&quot;\nADSR_HSM ---------------------&gt; IDLE STATE&quot;);
BSP::displayAdsrStat(IDLE);</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="4,15,3,1,40,12,-4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,6,36,11">
      <entry box="1,2,31,4"/>
     </state_glyph>
    </state>
    <state name="attack">
     <entry>iprintf(&quot;\nADSR_HSM ---------------------&gt; ATTACK STATE&quot;);
BSP::ledOn();
BSP::displayAdsrStat(ATTACK);</entry>
     <tran trig="TIMEOUT" target="../../3">
      <tran_glyph conn="4,28,3,1,40,11,-4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,19,36,11">
      <entry box="1,2,31,4"/>
     </state_glyph>
    </state>
    <state name="decay">
     <entry>iprintf(&quot;\nADSR_HSM ---------------------&gt; DECAY STATE&quot;);
BSP::displayAdsrStat(DECAY);</entry>
     <tran trig="TIMEOUT" target="../../4">
      <tran_glyph conn="4,40,3,1,40,10,-4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,32,36,10">
      <entry box="1,2,35,4"/>
     </state_glyph>
    </state>
    <state name="sustain">
     <entry>iprintf(&quot;\nADSR_HSM ---------------------&gt; SUSTAIN STATE&quot;);
BSP::displayAdsrStat(SUSTAIN);</entry>
     <tran trig="TIMEOUT" target="../../5">
      <tran_glyph conn="4,52,3,1,40,12,-4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,44,36,10">
      <entry box="1,2,33,4"/>
     </state_glyph>
    </state>
    <state name="release">
     <entry>iprintf(&quot;\nADSR_HSM ---------------------&gt; RELEASE STATE&quot;);
BSP::ledOff();
BSP::displayAdsrStat(RELEASE);</entry>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="4,65,3,3,-2,-55,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,57,36,11">
      <entry box="1,2,34,4"/>
     </state_glyph>
    </state>
    <state_diagram size="81,81"/>
   </statechart>
  </class>
  <attribute name="AO_Adsr" type="QP::QActive *const" visibility="0x00" properties="0x00">
   <code>= &amp;l_adsr;</code>
  </attribute>
 </package>
 <directory name=".">
  <file name="adsrHsm.h">
   <text>#ifndef adsr_hsm_h
#define adsr_hsm_h

namespace ADSRHSM {

enum AdsrSignals { // signals used in the ADSR
    TIME_TICK_SIG = QP::Q_USER_SIG, // published from tick ISR
    NOTE_ON_SIG,                    // A MIDI note on message is received
    NOTE_OFF_SIG,                   // A MIDI note off message is received
    ATTACK_END_SIG,                 // The attach level reaches its maximum
    DECAY_END_SIG,                  // The decay level reaches its minimum
    RELEASE_END_SIG,                // The release level reaches its minimum
    TIMEOUT_SIG,

    MAX_SIG,                        // the last signal (keep always last)
};


} // namespace ADSRHSM

$declare${Events::noteOnEvt}
$declare${Events::noteOffEvt}


// opaque pointers to active objects in the application
$declare${AOs::AO_Adsr}

#endif // adsr_hsm_h</text>
  </file>
  <file name="adsrHsm.cc">
   <text>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt; /* for exit() */
#include &quot;qpcpp.h&quot;
#include &quot;adsrHsm.h&quot;
#include &quot;bsp.h&quot;

//Q_DEFINE_THIS_FILE
using namespace MAINBSP;

$declare${AOs::Adsr}

namespace ADSRHSM {

static char_t const * const IDLE = &amp;&quot;IDLE&quot;[0];
static char_t const * const ATTACK = &amp;&quot;ATTACK&quot;[0];
static char_t const * const DECAY = &amp;&quot;DECAY&quot;[0];
static char_t const * const SUSTAIN = &amp;&quot;SUSTAIN&quot;[0];
static char_t const * const RELEASE = &amp;&quot;RELEASE&quot;[0];


// local objects -------------------------------------------------------------
static Adsr l_adsr; // the sole instance of the Adsr active object

} // namespace ADSRHSM

// Public-scope objects ------------------------------------------------------
$define${AOs::AO_Adsr}

// Active object definition --------------------------------------------------
$define${AOs::Adsr}</text>
  </file>
 </directory>
</model>
