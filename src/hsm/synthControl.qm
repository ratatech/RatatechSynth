<?xml version="1.0" encoding="UTF-8"?>
<model version="4.3.0" links="0">
 <documentation>Simple Blinky example for QP/C++, which demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, Mac)
- Platform-independent main() function
- make.bat batch file for Windows</documentation>
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="SoundGenHSM" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <operation name="SoundGenHSM" type="" visibility="0x00" properties="0x00">
    <code>  : QActive(Q_STATE_CAST(&amp;SoundGenHSM::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="QS_FUN_DICT">
    <initial target="../1">
     <action>me-&gt;m_timeEvt.armX(BSP::TICKS_PER_SEC/2, BSP::TICKS_PER_SEC/2);</action>
     <initial_glyph conn="11,6,4,1,3,21,5,-2">
      <action box="0,-3,54,6"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>BSP::ledOff();</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="11,23,3,1,21,12,-2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="11,12,19,14">
      <entry box="1,2,13,7"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>BSP::ledOn();
fillBuffer();</entry>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="11,42,3,1,24,-26,-5">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="11,31,19,13">
      <entry box="1,2,12,6"/>
     </state_glyph>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
  <class name="paramsHandlerHSM" superclass="qpcpp::QActive">
   <attribute name="attr1" type="" visibility="0x00" properties="0x00"/>
  </class>
 </package>
 <directory name=".">
  <file name="soundGenHSM.cc">
   <text>
#include &quot;soundGenHSM.h&quot;

using namespace QP;
using namespace MAINBSP;

Q_DEFINE_THIS_FILE

//*============== ask QM to declare the Blinky class ================*/
$declare${AOs::SoundGenHSM}

// local objects --------------------------------------------------------------
SoundGenHSM l_soundGenHSM;

// global objects ------------------------------------------------------------
QActive * const AO_SoundGenHSM = &amp;l_soundGenHSM; // opaque pointer

/*================ ask QM to define the Blinky class ================*/
$define${AOs::SoundGenHSM}


</text>
  </file>
  <file name="soundGenHSM.h">
   <text>
#ifndef soundGenHSM_h
#define soundGenHSM_h

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &quot;qpcpp.h&quot;
#include &quot;bsp.h&quot;
#include &quot;soundGen.h&quot;
#include &quot;types.h&quot;

using namespace QP;

enum SoundGenHSMignals {
    DUMMY_SIG = Q_USER_SIG,
    MAX_PUB_SIG,  // the last published signal

    TIMEOUT_SIG,
    MAX_SIG       // the last signal
};

extern QActive * const AO_SoundGenHSM; // opaque pointer

#endif // soundGenHSM_h</text>
  </file>
 </directory>
</model>
