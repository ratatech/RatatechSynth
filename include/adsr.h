/*
 * adsr.h
 *
 *  Created on: Jul 18, 2015
 *      Author: rata
 */

#ifndef INCLUDE_ADSR_H_
#define INCLUDE_ADSR_H_

#include "ratatechSynth.h"
#include "waveTables.h"
#include <math.h>

#define ENV_LUT_LENGTH 256
enum adsr_state { ATTACK_STATE,DECAY_STATE ,SUSTAIN_STATE,RELEASE_STATE,IDLE_STATE};

const unsigned char env_lut[ENV_LUT_LENGTH] = {
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
};


class ADSREnv {
	public:

		double attack;
		double decay;
		double sustain;
		double release;
		int16_t adsrAmp;
		adsr_state adsr_st;
		int32_t ph_inc_A;
		int32_t ph_inc_D;
		int32_t ph_inc_S;
		int32_t ph_inc_R;
		int32_t ph_ind;
		int32_t decay_len;

		int16_t env_up_lut_q15[SAMPLES_ENV_LUT] = {
				0, 1024, 2048, 3072, 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, 30720, 31744,
		};

		int16_t env_down_lut_q15[SAMPLES_ENV_LUT] = {
				32767, 31744, 30720, 29696, 28672, 27648, 26624, 25600, 24576, 23552, 22528, 21504, 20480, 19456, 18432, 17408, 16384, 15360, 14336, 13312, 12288, 11264, 10240, 9216, 8192, 7168, 6144, 5120, 4096, 3072, 2048, 1024,
		};
//		int16_t env_up_lut_q15[NR_OF_SAMPLES] = {
//		-128, -127, -126, -125, -124, -123, -122, -121, -120,
//		-119, -118, -117, -116, -115, -114, -113, -112, -111,
//		-110, -109, -108, -107, -106, -105, -104, -103, -102,
//		-101, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91,
//		-90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79,
//		-78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67,
//		-66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55,
//		-54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43,
//		-42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31,
//		-30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19,
//		-18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6,
//		-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
//		13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
//		29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
//		45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
//		61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
//		77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
//		93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
//		107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
//		120, 121, 122, 123, 124, 125, 126, 127,
//
//		};
//
//		int16_t env_down_lut_q15[NR_OF_SAMPLES] = {
//		128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
//		};
		void calcAdsrSteps(void){
			ph_inc_A = (int32_t)((((double)SAMPLES_ENV_LUT/(double)(FS*attack)))*1048576);

			decay_len = (int64_t)((((double)SAMPLES_ENV_LUT*sustain))*1048576);

			ph_inc_D = (int32_t)((((double)decay_len/(double)(FS*decay))));

			int32_t release_len = (SAMPLES_ENV_LUT<<20)-decay_len;

			ph_inc_R = (int32_t)((((double)(release_len)/(double)(FS*release))));

		}

		void updateEnv(void){

			switch (adsr_st)
			{
				case ATTACK_STATE:
				if (ph_ind>=(SAMPLES_ENV_LUT_20_BIT))
				{
					adsr_st = DECAY_STATE;
					ph_ind = 0;
					break;

				}
				ph_ind += ph_inc_A;
				adsrAmp = (int16_t) arm_linear_interp_q15(env_up_lut_q15,ph_ind,NR_OF_SAMPLES);

				break;

				case DECAY_STATE:

				if (ph_ind>=(decay_len))
				{
					//adsr_st = SUSTAIN_STATE;
					break;
				}

				ph_ind += ph_inc_D;
				adsrAmp = (int16_t) arm_linear_interp_q15(env_down_lut_q15,ph_ind,NR_OF_SAMPLES);

				break;

				case SUSTAIN_STATE:
					//do nothing, wait the key to be released and jump to the next state
					//trace_printf("SUSTAINEDDD!\n");
				break;

				case RELEASE_STATE:

					if (ph_ind>=(SAMPLES_ENV_LUT_20_BIT))
					{
						adsr_st = IDLE_STATE;
						ph_ind = 0;
						break;
					}
					adsrAmp = (int16_t) arm_linear_interp_q15(env_down_lut_q15,ph_ind,NR_OF_SAMPLES);
					ph_ind += ph_inc_R;


				break;
			}


		}

};


#endif /* INCLUDE_ADSR_H_ */
